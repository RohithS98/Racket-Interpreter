(define a 10)
(define b 12)
(define square (lambda (s) (* s s)))
(define sqrt (lambda (s) (expt s 0.5)))
(square a)
(sqrt b)

(define dist (lambda (p1 p2) (sqrt (+ (square (- (car p1) (car p2))) (square (- (car (cdr p1)) (car (cdr p2))))))))
(define p1 (list 3 4))
(define p2 (list 1 0))
(dist p1 p2)

(define fact (lambda (f) (if (< f 2) 1 (* f (fact (- f 1))))))
(fact 4)

(define a 10)
(define b 12)
(cond [(< a b) "a < b"] [else "No"])
(cond [(> a b) "Not True"] [(= a b) "Also not true"] [(equal? (+ a 2) b) "True!"])

(define l1 (list 8 12 3 9 60 34 22 99))
(cons 2 l1)
(take l1 3)
(drop l1 5)
(define l2 (list 1 2 3 4))
(append l1 l2)

(define sum1 (lambda (s) (if (length s) (+ (car s) (sum1 (cdr s))) 0)))
(define l3 (list 4 2 5 7 1))
(sum1 l3)

(define (agcd l) (if (equal? (length l) 1) (car l) (gcd (car l) (agcd (cdr l)))))
(define l1 (list 5 10 15))
(agcd l1)
(define l2 (list 9 3))
(agcd l2)
(agcd (append l2 (list 10)))